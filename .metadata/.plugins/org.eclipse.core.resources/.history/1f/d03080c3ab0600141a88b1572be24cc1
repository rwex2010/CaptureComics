package CaptureImages;

//import java.io.LineNumberReader;
//import java.io.Reader;
import java.time.LocalDate;
import java.util.Enumeration;

import javax.swing.text.MutableAttributeSet;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.HTML.Tag;

/**
 * *****************************************************************************
 * 
 * This class is the callback that feeds the parser
 * 
 * @author wecksr
 * 
 *         *********************************************************************
 *         ********
 */
class SwingHtmlParser extends HTMLEditorKit.ParserCallback {

    private int intDebugLevel = 0; // 0=no ui 1=output just bare minimum
    // 9=output everything
    private boolean blnFoundDate = false;
    private String strImageUrl = "";
    private String strImageDate = "";
    private LocalDate ldImageDate;

    private boolean blnFoundRightDivTag = false;
    private String strComicDateNoDelimeter = "";
    private String strTagToFind = "div";

    public void handleSimpleTag(Tag tag, MutableAttributeSet attrSet, int pos) {
	handleAllStartTags(tag, attrSet, pos);
    }

    private void printTagWithAttributes(Tag tag, MutableAttributeSet attrSet) {
	if (intDebugLevel >= 5) {
	    System.out.println("*** method printTagWithAttributes ***" + tag.toString());

	}
	// printTagWithAttributes(tag, attrSet);
    }

    public void handleStartTag(Tag tag, MutableAttributeSet attrSet, int pos) {
	handleAllStartTags(tag, attrSet, pos);
    }

    public void handleText(char[] data, int pos) {
	if (intDebugLevel >= 5) {
	    System.out.println("Tag Text => " + new String(data));
	}
    }

    public void handleComment(char[] data, int pos) {
	if (intDebugLevel >= 5) {
	    System.out.println("Comment Text => " + new String(data));
	}
    }

    public void handleEndOfLineString(String data) {
	// This is invoked after the stream has been parsed, but before
	// flush.
	// eol will be one of \n, \r or \r\n, which ever is
	// encountered the most in parsing the stream.
	if (intDebugLevel >= 5) {
	    System.out.println("End of Line String => " + data);
	}
    }

    public void handleEndTag(Tag tag, int pos) {

	if (intDebugLevel >= 5) {
	    System.out.println(pos + "    Closing: " + tag.toString());
	}
    }

    public void handleError(String err, int pos) {
	if (intDebugLevel >= 5) {
	    System.out.println("Error => " + err);
	}
    }

    /**
     * method to handle all Start tags and locates the ones needed. The switch
     * statement must execute each case statement in the following order 1 -
     * 'div' - this looks for the div tag with an id of 'content' and skips over
     * all up to that point 2 - 'h1' - this tag does not contain any information
     * but a child of this tag is the 'a' tag 3 - 'a' - This tag contains an
     * href attribute with a value that contains the date of the image 4 - 'p' -
     * This tag also does not contain any information, but the next 'img' tag
     * contains the url information 5 - 'img' - This tag contains an src
     * attribute with a value that contains the url of the image with the 'code'
     * for this image ***
     * 
     * @param tag
     *            is the HTML.Tag that this routine is parsing
     * @param attrSet
     *            is a set of the attributes that a are part of this tag
     * @param pos
     *            is the position in the reader that this tag is located.
     */
    private void handleAllStartTags(Tag tag, MutableAttributeSet attrSet, int pos) {
	if (intDebugLevel >= 5) {
	    displayThisTag(tag, attrSet, pos);
	}
	switch (strTagToFind) {
	case "div":
	    if (tag == HTML.Tag.DIV) {
		blnFoundRightDivTag = FindRightDivTag(tag, attrSet, pos);
		if (blnFoundRightDivTag) {
		    if (intDebugLevel >= 5) {
			System.out.println("**Div**");
			displayThisTag(tag, attrSet, pos);
		    }
		    strTagToFind = "h1";
		}
	    }
	    break;

	case "h1":
	    if (tag == HTML.Tag.H1) {
		if (intDebugLevel >= 5) {
		    System.out.println("**** H1 ***************");
		    displayThisTag(tag, attrSet, pos);
		}
		strTagToFind = "a";
	    }
	    break;

	case "a":
	    if (tag == HTML.Tag.A) {
		if (intDebugLevel >= 5) {
		    System.out.println("**** a ***************");
		    displayThisTag(tag, attrSet, pos);
		}
		String strHrefAtt = findProperAttributes(tag, attrSet, pos, HTML.Attribute.HREF);
		blnFoundDate = CreateDateString(strHrefAtt);
		strTagToFind = "p";
	    }
	    break;

	case "p":
	    if (tag == HTML.Tag.P) {
		if (intDebugLevel >= 5) {
		    System.out.println("******* P *******");
		    displayThisTag(tag, attrSet, pos);
		}
		strTagToFind = "img";
	    }
	    break;

	case "img": // look for 'src' attribute
	    if (tag == HTML.Tag.IMG) {
		if (intDebugLevel >= 5) {
		    System.out.println("**** img ***************");
		    displayThisTag(tag, attrSet, pos);
		}
		String strSrcAtt = findProperAttributes(tag, attrSet, pos, HTML.Attribute.SRC);
		if (intDebugLevel >= 5) {
		    System.out.println("Tag: img -- Att: src: " + strSrcAtt);
		}
		strImageUrl = strSrcAtt;
		strTagToFind = "done";
	    }
	    break;

	default:
	    break;
	}
    }

    private void displayThisTag(Tag tag, MutableAttributeSet attrSet, int pos) {
	if (intDebugLevel >= 5) {
	    System.out.println(pos + "~Tag =>~" + tag.toString() + "~Attribute cnt: " + attrSet.getAttributeCount());
	}

    }

    /**
     * 
     * @param tag
     * @param attrSet
     * @param pos
     * @param htmlAtt
     * @return
     */
    private String findProperAttributes(Tag tag, MutableAttributeSet attrSet, int pos, HTML.Attribute htmlAtt) {
	String strReturnValue = null;
	int intAttCnt = attrSet.getAttributeCount();

	if (intAttCnt > 0) {
	    Enumeration<?> attributeNames = attrSet.getAttributeNames();
	    while (attributeNames.hasMoreElements()) {
		Object objAttrName = attributeNames.nextElement();
		String attrName = objAttrName.toString();
		if (intDebugLevel >= 7) {
		    System.out.println("        Tag With Attributes => " + attrName + " : " + attrSet.getAttribute(objAttrName));
		}

		String strAttValue = (String) attrSet.getAttribute(htmlAtt);
		if (strAttValue != null && strReturnValue == null) {
		    strReturnValue = strAttValue;
		}
	    }

	}

	return strReturnValue;
    }

    private boolean FindRightDivTag(Tag tag, MutableAttributeSet attrSet, int pos) {
	boolean blnReturnValue = false;

	String strDivId = (String) attrSet.getAttribute(HTML.Attribute.ID);
	String strToCompare = "content";
	if (strToCompare.equals(strDivId)) {
	    blnReturnValue = true;
	}
	return blnReturnValue;
    }

    private boolean CreateDateString(String strHref) {
	boolean blnReturnValue = false;

	String[] aryHrefDate = strHref.split("/");
	if (intDebugLevel >= 5) {
	    // strComicDateNoDelimeter = "";
	    String strTemp = "";
	    for (int ix = 0; ix < aryHrefDate.length; ix++) {
		strTemp += aryHrefDate[ix] + " - ";
		System.out.println("ix = " + ix + ") value: " + aryHrefDate[ix]);
	    }
	    System.out.println("array length: " + aryHrefDate.length + ") " + strTemp);

	}
	if (aryHrefDate.length >= 5) {

	    strImageDate = aryHrefDate[2] + aryHrefDate[3] + aryHrefDate[4];

	    Integer intYear = new Integer(aryHrefDate[2]);
	    Integer intMonth = new Integer(aryHrefDate[3]);
	    Integer intDay = new Integer(aryHrefDate[4]);
	    ldImageDate = LocalDate.of(intYear, intMonth, intDay);

	    if (intDebugLevel >= 5) {
		System.out.println("noDelimeterDate: " + strComicDateNoDelimeter);
	    }
	    blnReturnValue = true;
	}

	return blnReturnValue;
    }

    public void setDebugLevel(int intLevel) {
	intDebugLevel = intLevel;
    }

    // public void setMyReader(Reader myReader) {
    // this.myReader = (LineNumberReader) myReader;
    //
    // }

    public String getImageStringDate() {
	return strImageDate;
    }

    public LocalDate getImageLocalDate() {
	return ldImageDate;
    }

    public String getImageUrl() {
	return strImageUrl;
    }

}